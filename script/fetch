#!/usr/bin/env python

import os
import sys
import argparse
from time import sleep
from owslib.wmts import WebMapTileService

import certifi

print(certifi.where())
print(os.path.dirname(sys.executable))

parser = argparse.ArgumentParser(description='Fetch tiles from an ArcGIS WMTS server')
parser.add_argument('-x0', required=True, type=int, help="x tile index to start at")
parser.add_argument('-x1', type=int, help="x tile index to end at")
parser.add_argument('-y0', required=True, type=int, help="y tile index to start at")
parser.add_argument('-y1', type=int, help="y tile index to end at")
parser.add_argument('-o', '--offset', type=int, help="number of tiles to offset from origin x,y")
parser.add_argument('-z', '--zoom', required=True, help="zoom level to fetch")
parser.add_argument('-u', '--url', required=True, help="WMTS service url.  Typically ends with /MapServer.")
parser.add_argument('-l', '--layer', required=True)
parser.add_argument('-r', '--route', required=True, help="route path for WMTS service url")
parser.add_argument('-t', '--tilematrixset', default='GoogleMapsCompatible')
parser.add_argument('-e', '--epsg', default='3857', help="EPSG code for tile matrix set")
parser.add_argument('-f', '--force', default=False,
                    help="Force fetching new image regardless if the tile exists on the local\
                         file system")

args = parser.parse_args()

if args.offset:
    args.x1 = args.x0 + args.offset
    args.y1 = args.y0 + args.offset

url = args.url + "/WMTS/1.0.0/WMTSCapabilities.xml"

print("Fetching %s tiles from %s\n" % ((args.x1 - args.x0) * (args.y1 + 1 - args.y0), url))

wmts = WebMapTileService(url)

# for x in range(args.x0, args.x1 + 1):
#     for y in range(args.y0, args.y1 + 1):
#         tile_file = "tiles/%s/%s/%s/%s.jpg" % (args.route, args.zoom, x, y)

#         if os.path.isfile(tile_file) and not args.force:
#             continue

#         print("Fetching %s..." % tile_file, end="\r")
#         tile = wmts.gettile(
#             layer=args.layer,
#             tilematrixset=args.tilematrixset,
#             tilematrix=str(args.zoom),
#             row=str(y),
#             column=str(x),
#             crs="EPSG:" + args.epsg)

#         os.makedirs(os.path.dirname(tile_file), exist_ok=True)
#         with open(tile_file, "wb") as f:
#             f.write(tile.read())
#         sleep(0.1)
